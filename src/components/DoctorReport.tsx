"use client";

import { useState } from "react";
import { SymptomAnalysis } from "@/lib/gemini";
import { format } from "date-fns";
import { Download, FileText, Printer, Loader } from "lucide-react";
import { SymptomEntry } from "@/lib/supabase";
import { analyzeSymptoms } from "@/lib/gemini";

interface Props {
	entries: SymptomEntry[];
}

export default function DoctorReport({ entries }: Props) {
	const [generating, setGenerating] = useState(false);
	const [report, setReport] = useState<
		(SymptomAnalysis & { entries: SymptomEntry[] }) | null
	>(null);
	const [dateRange, setDateRange] = useState({
		start: entries.length > 0 ? entries[entries.length - 1]?.date || "" : "",
		end: entries.length > 0 ? entries[0]?.date || "" : "",
	});

	const generateReport = async () => {
		setGenerating(true);
		try {
			// Filter entries by date range
			const filteredEntries = entries.filter((entry) => {
				const entryDate = new Date(entry.date);
				const startDate = new Date(dateRange.start);
				const endDate = new Date(dateRange.end);
				return entryDate >= startDate && entryDate <= endDate;
			});

			const analysis = await analyzeSymptoms(filteredEntries);
			setReport({ ...analysis, entries: filteredEntries });
		} catch (error) {
			console.error("Error generating report:", error);
		} finally {
			setGenerating(false);
		}
	};

	const exportReport = () => {
		if (!report) return;

		const reportContent = generateReportContent();
		const blob = new Blob([reportContent], { type: "text/plain" });
		const url = URL.createObjectURL(blob);
		const a = document.createElement("a");
		a.href = url;
		a.download = `health-report-${format(new Date(), "yyyy-MM-dd")}.txt`;
		document.body.appendChild(a);
		a.click();
		document.body.removeChild(a);
		URL.revokeObjectURL(url);
	};

	const generateReportContent = () => {
		if (!report) return "";

		return `
PATIENT HEALTH SUMMARY REPORT
Generated: ${format(new Date(), "PPpp")}
Period: ${format(new Date(dateRange.start), "PP")} - ${format(
			new Date(dateRange.end),
			"PP"
		)}

SUMMARY
${report.summary}

URGENCY LEVEL
${report.urgency.toUpperCase()}

SYMPTOM ENTRIES (${report.entries.length} total)
${report.entries
	.map(
		(entry: SymptomEntry, index: number) => `
${index + 1}. ${format(new Date(entry.date), "PP")}
   Symptoms: ${entry.symptoms.join(", ")}
   Severity: ${entry.severity}/8
   Notes: ${entry.notes || "None"}
`
	)
	.join("")}

PATTERNS & OBSERVATIONS
${
	report.patterns
		?.map(
			(pattern: string, index: number) => `
${index + 1}. ${pattern}
`
		)
		.join("") || "No specific patterns identified."
}

RECOMMENDATIONS
${
	report.recommendations
		?.map(
			(rec: string, index: number) => `
${index + 1}. ${rec}
`
		)
		.join("") || "No specific recommendations at this time."
}

DOCTOR NOTES
${report.doctorNotes}

DISCLAIMER
This report is generated by an AI system based on patient-logged symptoms and should be used as supplementary information only. It is not a substitute for professional medical examination and diagnosis.
    `.trim();
	};

	const printReport = () => {
		const reportContent = generateReportContent();
		const printWindow = window.open("", "_blank");
		if (printWindow) {
			printWindow.document.write(`
        <html>
          <head>
            <title>Health Report</title>
            <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; margin: 40px; }
              h1, h2 { color: #333; }
              .section { margin-bottom: 20px; }
              pre { white-space: pre-wrap; }
            </style>
          </head>
          <body>
            <pre>${reportContent}</pre>
          </body>
        </html>
      `);
			printWindow.document.close();
			printWindow.print();
		}
	};

	const getUrgencyColor = (urgency: string) => {
		switch (urgency) {
			case "high":
				return "text-red-600 bg-red-50 border-red-200";
			case "medium":
				return "text-yellow-600 bg-yellow-50 border-yellow-200";
			default:
				return "text-green-600 bg-green-50 border-green-200";
		}
	};

	if (entries.length === 0) {
		return (
			<div className="p-8 text-center bg-amber-50 border border-amber-200 rounded-2xl shadow-md mb-8">
				<FileText className="h-14 w-14 text-orange-500 mx-auto mb-4" />
				<h3 className="text-2xl font-bold text-amber-900 mb-3 flex items-center justify-center gap-2">
					No Data Available
				</h3>
				<p className="text-lg text-amber-700 mb-2">
					Add symptom entries to generate a comprehensive report for your
					doctor.
				</p>
			</div>
		);
	}

	return (
		<div className="p-8">
			<div className="flex justify-between items-center mb-8">
				<h3 className="text-2xl font-bold text-amber-900 flex items-center gap-2">
					<FileText className="h-8 w-8 bg-orange-100 text-orange-600 rounded-full p-1 mr-2" />
					Doctor Report
				</h3>
				{report && (
					<div className="flex space-x-2">
						<button
							onClick={exportReport}
							className="flex items-center px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
						>
							<Download className="h-4 w-4 mr-2" />
							Export
						</button>
						<button
							onClick={printReport}
							className="flex items-center px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
						>
							<Printer className="h-4 w-4 mr-2" />
							Print
						</button>
					</div>
				)}
			</div>

			{/* Date Range Selection */}
			<div
				className="border border-amber-200 rounded-lg p-4 mb-6"
				style={{
					background: "linear-gradient(135deg, #fefcf7 0%, #fef7ed 100%)",
				}}
			>
				<h4 className="font-medium text-amber-900 mb-4">Report Parameters</h4>
				<div className="grid grid-cols-1 md:grid-cols-3 gap-4">
					<div>
						<label className="block text-sm font-medium text-amber-800 mb-1">
							Start Date
						</label>
						<input
							type="date"
							value={dateRange.start}
							onChange={(e) =>
								setDateRange((prev) => ({ ...prev, start: e.target.value }))
							}
							className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500"
						/>
					</div>
					<div>
						<label className="block text-sm font-medium text-amber-800 mb-1">
							End Date
						</label>
						<input
							type="date"
							value={dateRange.end}
							onChange={(e) =>
								setDateRange((prev) => ({ ...prev, end: e.target.value }))
							}
							className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500"
						/>
					</div>
					<div className="flex items-end">
						<button
							onClick={generateReport}
							disabled={generating || !dateRange.start || !dateRange.end}
							className="w-full flex items-center justify-center px-4 py-2 bg-gradient-to-r from-orange-600 to-red-600 text-white rounded-lg hover:from-orange-700 hover:to-red-700 disabled:bg-gray-400 transition-colors"
						>
							{generating ? (
								<>
									<Loader className="h-4 w-4 mr-2 animate-spin" />
									Generating...
								</>
							) : (
								<>
									<FileText className="h-4 w-4 mr-2" />
									Generate Report
								</>
							)}
						</button>
					</div>
				</div>
			</div>

			{/* Generated Report */}
			{report && (
				<div
					className="border border-amber-200 rounded-lg overflow-hidden"
					style={{
						background: "linear-gradient(135deg, #fefcf7 0%, #fef7ed 100%)",
					}}
				>
					<div className="bg-amber-100 px-6 py-4 border-b border-amber-200">
						<div className="flex justify-between items-center">
							<h4 className="font-semibold text-amber-900">
								Health Summary Report
							</h4>
							<div
								className={`px-3 py-1 rounded-full text-sm font-medium border ${getUrgencyColor(
									report.urgency
								)}`}
							>
								{report.urgency.charAt(0).toUpperCase() +
									report.urgency.slice(1)}{" "}
								Priority
							</div>
						</div>
						<p className="text-sm text-gray-600 mt-1">
							Generated on {format(new Date(), "PPpp")} | Period:{" "}
							{format(new Date(dateRange.start), "PP")} -{" "}
							{format(new Date(dateRange.end), "PP")}
						</p>
					</div>

					<div className="p-6 space-y-6">
						{/* Summary */}
						<div>
							<h5 className="font-medium text-gray-900 mb-2">
								Executive Summary
							</h5>
							<p className="text-gray-700 bg-gray-50 p-4 rounded-lg">
								{report.summary}
							</p>
						</div>

						{/* Entry Summary */}
						<div>
							<h5 className="font-medium text-gray-900 mb-3">
								Symptom Entries ({report.entries.length} total)
							</h5>
							<div className="space-y-3">
								{report.entries.slice(0, 5).map((entry: SymptomEntry) => (
									<div
										key={entry.id}
										className="flex justify-between items-start border-l-4 border-orange-500 pl-4 py-2"
									>
										<div>
											<div className="font-medium text-sm text-gray-900">
												{format(new Date(entry.date), "MMM dd, yyyy")}
											</div>
											<div className="text-sm text-gray-600">
												{entry.symptoms.join(", ")} (Severity: {entry.severity}
												/8)
											</div>
											{entry.notes && (
												<div className="text-xs text-gray-500 mt-1 max-w-md">
													{entry.notes}
												</div>
											)}
										</div>
									</div>
								))}
								{report.entries.length > 5 && (
									<p className="text-sm text-gray-500 text-center py-2">
										... and {report.entries.length - 5} more entries
									</p>
								)}
							</div>
						</div>

						{/* Patterns */}
						{report.patterns && report.patterns.length > 0 && (
							<div>
								<h5 className="font-medium text-gray-900 mb-2">
									Observed Patterns
								</h5>
								<ul className="space-y-2">
									{report.patterns.map((pattern: string, index: number) => (
										<li
											key={index}
											className="flex items-start text-sm text-gray-700"
										>
											<span className="text-orange-500 mr-2 mt-1">•</span>
											{pattern}
										</li>
									))}
								</ul>
							</div>
						)}

						{/* Recommendations */}
						{report.recommendations && report.recommendations.length > 0 && (
							<div>
								<h5 className="font-medium text-gray-900 mb-2">
									Recommendations
								</h5>
								<ul className="space-y-2">
									{report.recommendations.map((rec: string, index: number) => (
										<li
											key={index}
											className="flex items-start text-sm text-gray-700"
										>
											<span className="text-green-500 mr-2 mt-1">•</span>
											{rec}
										</li>
									))}
								</ul>
							</div>
						)}

						{/* Doctor Notes */}
						<div>
							<h5 className="font-medium text-gray-900 mb-2">Clinical Notes</h5>
							<div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
								<p className="text-sm text-blue-900 whitespace-pre-wrap">
									{report.doctorNotes}
								</p>
							</div>
						</div>
					</div>

					{/* Footer */}
					<div className="bg-gray-50 px-6 py-4 border-t border-gray-200">
						<div className="flex items-start space-x-2">
							<div className="flex-shrink-0 w-5 h-5 bg-yellow-100 rounded-full flex items-center justify-center mt-0.5">
								<span className="text-yellow-600 text-xs font-bold">!</span>
							</div>
							<div>
								<p className="text-xs font-medium text-gray-900">
									Medical Disclaimer
								</p>
								<p className="text-xs text-gray-600 mt-1">
									This AI-generated report is intended as supplementary
									information only. It should not replace professional medical
									consultation, examination, or diagnosis. Please share this
									report with your healthcare provider for proper medical
									evaluation.
								</p>
							</div>
						</div>
					</div>
				</div>
			)}

			{/* Instructions */}
			{!report && (
				<div className="bg-amber-50 border border-amber-200 rounded-2xl p-8 shadow-md mb-8">
					<h4 className="font-bold text-amber-900 text-xl mb-4 flex items-center gap-2">
						<FileText className="h-6 w-6 text-orange-500" />
						How to Use This Report
					</h4>
					<ul className="text-base text-amber-800 space-y-4">
						<li className="flex items-center gap-3 group">
							<span className="text-orange-600 font-bold rounded-full bg-orange-100 px-3 py-1 transition-transform group-hover:scale-110">
								1
							</span>
							<span className="font-medium">
								Select the <span className="text-orange-700">date range</span>{" "}
								for symptoms you want to include in the report.
							</span>
						</li>
						<li className="flex items-center gap-3 group">
							<span className="text-orange-600 font-bold rounded-full bg-orange-100 px-3 py-1 transition-transform group-hover:scale-110">
								2
							</span>
							<span className="font-medium">
								Click <span className="text-orange-700">Generate Report</span>{" "}
								to create an AI-powered health summary.
							</span>
						</li>
						<li className="flex items-center gap-3 group">
							<span className="text-orange-600 font-bold rounded-full bg-orange-100 px-3 py-1 transition-transform group-hover:scale-110">
								3
							</span>
							<span className="font-medium">
								Export or print the report to share with your healthcare
								provider.
							</span>
						</li>
						<li className="flex items-center gap-3 group">
							<span className="text-orange-600 font-bold rounded-full bg-orange-100 px-3 py-1 transition-transform group-hover:scale-110">
								4
							</span>
							<span className="font-medium">
								The report includes{" "}
								<span className="text-orange-700">symptom patterns</span>,{" "}
								<span className="text-orange-700">severity trends</span>, and{" "}
								<span className="text-orange-700">AI insights</span>.
							</span>
						</li>
					</ul>
				</div>
			)}
		</div>
	);
}
